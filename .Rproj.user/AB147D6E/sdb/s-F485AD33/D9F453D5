{
    "contents" : "# LAST UPDATED AT 21/1, 13.00\n# \n# NEXT TO DO: LINE \n\n\n# Clearing up the data\n# rm(list=ls())\n\n# Loading the requiring sources\nrequire(\"classInt\") || install.packages(\"classInt\")\nrequire(\"colorRamps\") || install.packages(\"colorRamps\")\nrequire(\"maptools\") || install.packages(\"maptools\")\nrequire(\"stringr\") || install.packages(\"stringr\")\n\n\n# Initializing the variables\ntravelMean <- c()\n\n# Set the working directory and read the required data\n setwd(\"//file/UsersY$/yzh215/Home/Desktop/InteractiveMap\")\n# setwd(\"/home/cococatty/Desktop/InteractiveMap\")\n# setwd(\"C:/Users/User/Desktop/InteractiveMap\")\n\n\n# Reading required data\n# geodata contains various travel means and the number of people travel in the means\ngeodata <- read.csv('geodata.csv'\n                    , col.names= c('AreaCode','AreaName','AreaFull','MeanCode','MeanName','MeanFull','Ppl')\n                    , header= FALSE\n                    , sep = ','\n                    , numerals = c('no.loss'))\n\n# Remove the header from the data - cannot set \"header = TRUE\" in previous section because it\n# would trim the 0s away from Mean codes and Area codes.\ngeodata <- geodata[!(geodata$MeanCode == 'MeanCode' & geodata$AreaCode == 'AreaCode'), ]\n\n# Generating the details of travel means\nmeandata <- unique(geodata[c('MeanCode', 'MeanName', 'MeanFull') ] )\nmeandata <- meandata[order(meandata$MeanName),]\n\n# Generating the list of choices for the Travel means input in UI\nmeanChoices <- as.character(meandata$MeanCode)\nnames(meanChoices) <- meandata$MeanName\n\n# Create a new column \"Percentage\" in geodata\ngeodata$Percentage <- c(0)\n\n# Create a list with the Areas and the total numbers of ppl\ntotalList <- setNames(aggregate(as.numeric(levels(geodata$Ppl)[geodata$Ppl]), by=list(Area=geodata$AreaCode), FUN = sum)\n                      , c('AreaCode', 'Total')\n)\n\n#Calculate the percentages within Areas\nfor (i in 1:nrow(geodata))\n{\n  rowPpl <- as.numeric(levels(geodata$Ppl[i])[geodata$Ppl[i]])\n  rowTotal <- ((totalList[totalList$AreaCode == geodata$AreaCode[i],]) $Total)\n  geodata$Percentage[i] <- (rowPpl / rowTotal)\n}\n\n# Reading and merging the shapefiles\nshape <- readShapeSpatial(\"./Shapefiles/TA2013_GV_Clipped.shp\")\nshape <- shape[!(shape@data$TA2013_NAM == 'Chatham Islands Territory' | shape@data$TA2013_NAM == 'Area Outside Territorial Authority'),]\nshape@data <- merge(shape@data,geodata,by.x=\"TA2013\",by.y=\"AreaCode\", all.x= TRUE )#, replace = TRUE \nshape@data$Ppl <- as.numeric(levels(shape@data$Ppl)[shape@data$Ppl])\nshape@data$Percentage[is.na(shape@data$Percentage)] <- 0\nshape@data$Percentage <- round(shape@data$Percentage*100,4)\n\n# Generating the base of the singleTable (table for single travel mean) in UI\nnewtable <- subset(shape@data)\nnewtable <- subset(newtable, select = -c(TA2013, TA2013_NAM, MeanFull, AreaFull))\n\n\n# This function plots the colored map of single travel mean\nsingleMap <- function(numQUan, travelMean, classIntMethod)\n{\n  # Defining the color data for single table\n  pal <- colorRampPalette(c(\"yellow\",\"red\"), space= \"rgb\")\n  \n  if (classIntMethod == \"fixed\") {\n    breakList <- c(min(shape@data$Percentage[shape@data$Mean==travelMean]))\n    unit <- round(max(shape@data$Percentage[shape@data$Mean==travelMean])/numQUan, digits = 2)\n    for (i in 1:numQUan) {\n      breakList <- c(breakList, unit*i)\n    }\n    \n    nclass <- classIntervals(shape@data$Percentage[shape@data$MeanCode==travelMean], n= numQUan, style = classIntMethod\n                             , fixedBreaks = breakList, dataPrecision = 2)\n  } else {\n    nclass <- classIntervals(shape@data$Percentage[shape@data$MeanCode==travelMean], n= numQUan, style = classIntMethod\n                             , dataPrecision = 2)  \n  }\n  \n  colPal <- findColours(nclass, pal(length(nclass$brks)-1))\n  \n  #Draw the coloured map and relevant details\n  plot(shape, legend=FALSE, border = \"Black\", col= colPal)\n  \n  #Setting up the legend text in the proper percentages format\n  legendT <- c()\n  legendText <- c()\n  newText <- c()\n  \n  for (i in 1:length(nclass$brks))\n  {\n    newText <- str_trim(paste(round(nclass$brks[i], digits = 2), '%'))\n    legendT <- c(legendT, newText)\n  }\n  \n  for (i in 1:(length(nclass$brks)-1))\n  {\n    newText <- c()\n    if (i == 1 && classIntMethod != \"fixed\") {\n      newText <- paste('0 % -', legendT[i])\n    }\n    else {\n      newText <- paste(legendT[i], '-', legendT[i+1])\n    }\n    legendText <- c(legendText, newText)\n  }\n  \n  legend('bottomright', legend= legendText, title = 'Legend', fill= pal(length(nclass$brks)-1), bty = 'o')#, pch= 1\n}\n\n\n\nprepareTwoMeans <- function(travelMeans) {\n  listx <- subset(newtable[newtable$MeanCode==travelMeans[1],])\n  listx <- listx[order(listx$Percentage),] \n  \n  listy <- subset(newtable[newtable$MeanCode==travelMeans[2],], select = -c(MeanName))\n  listy <- listy[order(listy$Percentage),] \n  \n  listx$xpos <- seq(nrow(listx))\n  listy$ypos <- seq(nrow(listy))\n  \n  listx <- merge(listx, listy, by.x = c(\"AreaName\"), by.y = c(\"AreaName\"), all=TRUE)\n  listx <- within(listx, mix <- rgb(red=listx$x, green=0, blue=listx$y, maxColorValue=nrow(listx)))\n  \n  return(listx)  \n}\n\n\n\n# This function plots the colored map of two travel means\nbiMap <- function(travelMeans)\n{\n  fullList <- prepareTwoMeans(travelMeans)\n\n  for (n in 1:nrow(fullList)) {\n    fullList$r[n] <- col2rgb(fullList$mix[n])[,1][1]\n    fullList$g[n] <- col2rgb(fullList$mix[n])[,1][2]\n    fullList$b[n] <- col2rgb(fullList$mix[n])[,1][3]\n  }\n  \n  fullList[order(fullList$xpos,fullList$ypos),] \n  plot(shape, legend=FALSE, border = \"Black\", col= fullList$mix)\n}\n\n#singleMap(5, travelMean = as.character(meandata$MeanCode[1]), \"pretty\")\n#title(paste (\"Map of New Zealand \\n Travel mean: \", meandata$MeanName[meandata$MeanCode == travelMean]))",
    "created" : 1453335268833.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3019257097",
    "id" : "D9F453D5",
    "lastKnownWriteTime" : 1453334518,
    "path" : "//file/UsersY$/yzh215/Home/Desktop/InteractiveMap/helper.R",
    "project_path" : "helper.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}