meanChoices <- as.character(meandata$MeanCode)
names(meanChoices) <- meandata$MeanName
# Create a new column "Percentage" in geodata
geodata$Percentage <- c(0)
# Create a list with the Areas and the total numbers of ppl
totalList <- setNames(aggregate(as.numeric(levels(geodata$Ppl)[geodata$Ppl]), by=list(Area=geodata$AreaCode), FUN = sum)
, c('AreaCode', 'Total')
)
# Calculate the percentages within Areas
for (i in 1:nrow(geodata))
{
rowPpl <- as.numeric(levels(geodata$Ppl[i])[geodata$Ppl[i]])
rowTotal <- ((totalList[totalList$AreaCode == geodata$AreaCode[i],]) $Total)
geodata$Percentage[i] <- (rowPpl / rowTotal)
}
# Reading and merging the shapefiles
shape <- readShapeSpatial("./Shapefiles/TA2013_GV_Clipped.shp")
shape <- shape[!(shape@data$TA2013_NAM == 'Chatham Islands Territory' | shape@data$TA2013_NAM == 'Area Outside Territorial Authority'),]
shape@data <- merge(shape@data,geodata,by.x="TA2013",by.y="AreaCode", all.x= TRUE )#, replace = TRUE
shape@data$Ppl <- as.numeric(levels(shape@data$Ppl)[shape@data$Ppl])
shape@data$Percentage[is.na(shape@data$Percentage)] <- 0
shape@data$Percentage <- round(shape@data$Percentage*100,1)
# Generating the base of the singleTable (table for single travel mean) in UI
newtable <- subset(shape@data)
newtable <- subset(newtable, select = -c(TA2013, TA2013_NAM, MeanFull, AreaFull))
# This function plots the colored map of single travel mean
singleMap <- function(numQUan, travelMean, classIntMethod)
{
# Defining the color data for single table
pal <- colorRampPalette(c("yellow","red"), space= "rgb")
if (classIntMethod == "fixed") {
breakList <- c(min(shape@data$Percentage[shape@data$Mean==travelMean]))
unit <- round(max(shape@data$Percentage[shape@data$Mean==travelMean])/numQUan, digits = 1)
for (i in 1:numQUan) {
breakList <- c(breakList, unit*i)
}
nclass <- classIntervals(shape@data$Percentage[shape@data$MeanCode==travelMean], n= numQUan, style = classIntMethod
, fixedBreaks = breakList, dataPrecision = 1)
} else {
nclass <- classIntervals(shape@data$Percentage[shape@data$MeanCode==travelMean], n= numQUan, style = classIntMethod
, dataPrecision = 1)
}
len <- length(nclass$brks)
colPal <- findColours(nclass, pal(len))
# Draw the coloured map and relevant details
plot(shape, legend=FALSE, border = "Black", col= colPal)
#Setting up the legend text in the proper percentages format
legendT <- c()
legendText <- c()
newText <- c()
for (i in 1:len)
{
newText <- str_trim(paste(round(nclass$brks[i], digits = 1), '%'))
legendT <- c(legendT, newText)
}
for (i in 1:(len-1))
{
newText <- c()
if (i == 1 && classIntMethod != "fixed") {
newText <- paste('0 % -', legendT[i])
}
else {
newText <- paste(legendT[i], '-', legendT[i+1])
}
legendText <- c(legendText, newText)
}
legend('bottomright', legend= legendText, title = 'Legend', fill= pal(len), bty = 'o')#, pch= 1
}
prepareTwoMeans <- function(travelMeans) {
listx <- subset(newtable[newtable$MeanCode==travelMeans[1],])
listx <- listx[order(listx$Percentage),]
listy <- subset(newtable[newtable$MeanCode==travelMeans[2],], select = -c(MeanName))
listy <- listy[order(listy$Percentage),]
listx$xpos <- seq(nrow(listx))
listy$ypos <- seq(nrow(listy))
listx <- merge(listx, listy, by.x = c("AreaName"), by.y = c("AreaName"), all=TRUE)
listx <- within(listx, mix <- rgb(red=255*listx$x/nrow(listx), green=0, blue=255*listx$y/nrow(listx)
, maxColorValue=255))
return(listx)
}
# Function to plot color bar
colorbar <- function(colourlist, travelMeans, min, max=-min, nticks=5, ticks=seq(min, max, len=nticks)) {#, travelMeans
lut <- colorRampPalette(colourlist)(100)
scale = (length(lut)-1)/(max-min)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', yaxt='n', ylab= NA, xlab=NA
, main='Legend')#, border = 'black'
axis(2, ticks, labels = c('Neutral', as.character(meandata$MeanName[meandata$MeanCode == travelMeans[1]])
, 'Both', as.character(meandata$MeanName[meandata$MeanCode == travelMeans[2]]), 'Neutral'), las=1)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border= NA)#, border= "solid"
}
}
# This function plots the colored map of two travel means
biMap <- function(travelMeans)
{
fullList <- prepareTwoMeans(travelMeans)
par(mfrow=c(1,2))
plot(shape, legend=FALSE, border = "Black", col= fullList$mix)
#plot.new()
colorbar(c("white", "red", "purple", "blue", "white"), travelMeans, -10)
}
#singleMap(5, travelMean = as.character(meandata$MeanCode[1]), "pretty")
#title(paste ("Map of New Zealand \n Travel mean: ", meandata$MeanName[meandata$MeanCode == travelMean]))
# LAST UPDATED AT 10/2, 12pm
#
# NEXT TO DO: CHANGE THE "MIX" TO A MEANINGFUL NAME
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
# Loading the requiring sources
require("devtools") || install.packages("devtools")
require("shiny") || install.packages("shiny")
require("DT") || install.packages("DT")
require("scatterD3") || install.packages("scatterD3")
library(scatterD3)
library(shiny)
#devtools::install_github("juba/scatterD3")
# Set the working directory and read the required data
setwd("//file/UsersY$/yzh215/Home/Desktop/InteractiveMap")
# setwd("/home/cococatty/Desktop/InteractiveMap")
# setwd("C:/Users/User/Desktop/InteractiveMap")
source("helper.R")
# Initializing the variables
minGrp <- 1
maxGrp <- 2
#Definte UI for the application
ui <- shinyUI(fluidPage(
titlePanel(title = "Interactive Map of New Zealand", windowTitle = "Interactive Map of New Zealand"),
sidebarPanel(
sliderInput("categories", "Number of Categories", min = 1, max = 10, value = 5
)
, br()
, selectInput(
"classIntMethod"#, "Division Method"
, label = "Select the intervals"
, choices = list("Equal" = "equal"
, "Fixed"= "fixed"
, "Pretty" = "pretty"
, "Quantiles" = "quantile"
, "Standard Deviation" = "sd"
)
, selected = "quantile"
, multiple = FALSE
)
, br()
# The following part is groupCheckBox format for the travelMeans
, checkboxGroupInput(
"travelMeans"
, label = "Select the mean below:"
, choices = meanChoices
, selected = NULL
)
, br()
),
#Show the map
mainPanel(
tabsetPanel(#type = "tabs",
tabPanel("Single-Mean Table", DT::dataTableOutput("onetable"), hr())
, tabPanel("Single-Mean Plot", #textOutput("oneMapText"),
plotOutput("oneMap", width = "800px", height = "800px"))
, tabPanel("Scatterplot", scatterD3Output("biScatter", width = "100%", height = "600px"))
, tabPanel("Two-Mean Plot", plotOutput("biMap", width = "800px", height = "800px")
, verbatimTextOutput("biMapText"))
#, tabPanel("legend", plotOutput("legend"))
)
, position="center"
, height= "auto"
)
)
)
#Definte server logic required to draw the map
server <- function(input, output, session) {
updateoneTable <- reactive({
onetable <- subset(newtable, newtable$MeanCode == tail(input$travelMeans, 1), select = -c(MeanCode)
, colnames = c('Territory', 'Mean Name', 'Number of People', 'Overall weight'))
onetable <- onetable[order(onetable$Percentage),]
rownames(onetable) <- seq(length=nrow(onetable))
return (onetable)
})
output$onetable <- DT::renderDataTable({
DT::datatable(
updateoneTable(), selection = "none"
, extensions = list("Scroller")
, options = list(
scrollY = 700
, pageLength = 30
, lengthMenu = list(c(30, -1), c("30", "All"))
)
)}
, server = TRUE
)
observe({
if (length(input$travelMeans) > maxGrp)
{
updateCheckboxGroupInput(session, 'travelMeans', selected = tail(input$travelMeans,maxGrp))
}
})
output$biMapText <- renderText({
paste("Red: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[1]]
, "Purple: A combination of both travel means"
, "Blue: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[2]], sep = "\n")
})
output$oneMap <- renderPlot(singleMap(input$categories, input$travelMeans, input$classIntMethod))
#  output$oneMapText <- renderText({ paste("Selected travel mean: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[2]] )})
output$biMap  <- renderPlot(biMap(input$travelMeans))
biList <- reactive({
prepareTwoMeans(input$travelMeans)
})
output$biScatter <- renderScatterD3({
tooltips <- paste("<strong>Territory Authority: ", biList()$AreaName,"</strong><br /> Percentage of x: "
, biList()$Percentage.x, "<br />"
, "Percentage of y: ", biList()$Percentage.y)
plot <- scatterD3(x = biList()$Percentage.x, y = biList()$Percentage.y
, xlab = meandata$MeanName[meandata$MeanCode == unique(biList()$MeanCode.x)]
, ylab = meandata$MeanName[meandata$MeanCode == unique(biList()$MeanCode.y)]
, tooltip_text = tooltips
)
return (plot)
})
}
shinyApp(ui = ui, server = server)
# Required function 'val2col' is from: http://www.menugget.blogspot.de/2011/09/converting-values-to-color-levels.html
val2col<-function(z, zlim, col = heat.colors(12), breaks){
if(!missing(breaks)){
if(length(breaks) != (length(col)+1)){stop("must have one more break than colour")}
}
if(missing(breaks) & !missing(zlim)){
zlim[2] <- zlim[2]+c(zlim[2]-zlim[1])*(1E-3)#adds a bit to the range in both directions
zlim[1] <- zlim[1]-c(zlim[2]-zlim[1])*(1E-3)
breaks <- seq(zlim[1], zlim[2], length.out=(length(col)+1))
}
if(missing(breaks) & missing(zlim)){
zlim <- range(z, na.rm=TRUE)
zlim[2] <- zlim[2]+c(zlim[2]-zlim[1])*(1E-3)#adds a bit to the range in both directions
zlim[1] <- zlim[1]-c(zlim[2]-zlim[1])*(1E-3)
breaks <- seq(zlim[1], zlim[2], length.out=(length(col)+1))
}
colorlevels <- col[((as.vector(z)-breaks[1])/(range(breaks)[2]-range(breaks)[1]))*(length(breaks)-1)+1] # assign colors to heights for each point
colorlevels
}
plotLegend <- function(travelMeans){
x <- seq(255)
y <- seq(255)
grd <- expand.grid(x=x,y=y)
#assign colors to grd levels
pal1 <- colorRampPalette(c("white", "red"), space = "rgb")
col1 <- val2col(x, col=pal1(255))
pal2 <- colorRampPalette(c("white", "blue"), space = "rgb")
col2 <- val2col(y, col=pal2(255))
col3 <- NA*seq(nrow(grd))
for(i in seq(nrow(grd))){
xpos <- grd$x[i]
ypos <- grd$y[i]
coltmp <- (col2rgb(col1[xpos])/2) + (col2rgb(col2[ypos])/2)
col3[i] <- rgb(coltmp[1], coltmp[2], coltmp[3], maxColorValue = 255)
grd$col[grd$x==xpos & grd$y==ypos] <- col3[i]
}
#  head(grd)
layout(matrix(c(1,2,3), nrow=1, ncol=3), widths=c(2,1,1), heights=2, respect=T)
plot(grd,col=col3, pch=19, xlab= meandata$MeanName[meandata$MeanCode==travelMeans[2]]
, ylab= meandata$MeanName[meandata$MeanCode==travelMeans[1]] , xaxt='n', yaxt='n')
return(grd)
}
# This function plots the colored map of two travel means
biMap <- function(travelMeans)
{
fullList <- prepareTwoMeans(travelMeans)
grd <- plotLegend(travelMeans)
for (i in nrow(fullList)){
fullList$col <- grd$col[grd$x==fullList$xpos & grd$y==fullList$ypos]
}
plot(shape, legend=FALSE, border = "Black", col= fullList$col)
}
#singleMap(5, travelMean = as.character(meandata$MeanCode[1]), "pretty")
#title(paste ("Map of New Zealand \n Travel mean: ", meandata$MeanName[meandata$MeanCode == travelMean]))
# Set the working directory and read the required data
# setwd("//file/UsersY$/yzh215/Home/Desktop/InteractiveMap")
setwd("/home/cococatty/Desktop/InteractiveMap")
# setwd("C:/Users/User/Desktop/InteractiveMap")
source("helper.R")
# Initializing the variables
minGrp <- 1
maxGrp <- 2
#Definte server logic required to draw the map
server <- function(input, output, session) {
updateoneTable <- reactive({
onetable <- subset(newtable, newtable$MeanCode == tail(input$travelMeans, 1), select = -c(MeanCode)
, colnames = c('Territory', 'Mean Name', 'Number of People', 'Overall weight'))
onetable <- onetable[order(onetable$Percentage),]
rownames(onetable) <- seq(length=nrow(onetable))
return (onetable)
})
output$onetable <- DT::renderDataTable({
DT::datatable(
updateoneTable(), selection = "none"
, extensions = list("Scroller")
, options = list(
scrollY = 700
, pageLength = 30
, lengthMenu = list(c(30, -1), c("30", "All"))
)
)}
, server = TRUE
)
observe({
if (length(input$travelMeans) > maxGrp)
{
updateCheckboxGroupInput(session, 'travelMeans', selected = tail(input$travelMeans,maxGrp))
}
})
output$biMapText <- renderText({
paste("Red: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[1]]
, "Purple: A combination of both travel means"
, "Blue: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[2]], sep = "\n")
})
output$oneMap <- renderPlot(singleMap(input$categories, input$travelMeans, input$classIntMethod))
#  output$oneMapText <- renderText({ paste("Selected travel mean: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[2]] )})
output$biMap  <- renderPlot(biMap(input$travelMeans))
output$biMapLegend  <- renderPlot(plotLegend(input$travelMeans))#, width = "auto", height = "auto"
biList <- reactive({
prepareTwoMeans(input$travelMeans)
})
output$biScatter <- renderScatterD3({
tooltips <- paste("<strong>Territory Authority: ", biList()$AreaName,"</strong><br /> Percentage of x: "
, biList()$Percentage.x, "<br />"
, "Percentage of y: ", biList()$Percentage.y)
plot <- scatterD3(x = biList()$Percentage.x, y = biList()$Percentage.y
, xlab = meandata$MeanName[meandata$MeanCode == unique(biList()$MeanCode.x)]
, ylab = meandata$MeanName[meandata$MeanCode == unique(biList()$MeanCode.y)]
, tooltip_text = tooltips
)
return (plot)
})
}
#Definte UI for the application
ui <- shinyUI(fluidPage(
titlePanel(title = "Interactive Map of New Zealand", windowTitle = "Interactive Map of New Zealand"),
sidebarPanel(
sliderInput("categories", "Number of Categories", min = 1, max = 10, value = 5
)
, br()
, selectInput(
"classIntMethod"#, "Division Method"
, label = "Select the intervals"
, choices = list("Equal" = "equal"
, "Fixed"= "fixed"
, "Pretty" = "pretty"
, "Quantiles" = "quantile"
, "Standard Deviation" = "sd"
)
, selected = "quantile"
, multiple = FALSE
)
, br()
# The following part is groupCheckBox format for the travelMeans
, checkboxGroupInput(
"travelMeans"
, label = "Select the mean below:"
, choices = meanChoices
, selected = NULL
)
, br()
),
#Show the map
mainPanel(
tabsetPanel(#type = "tabs",
tabPanel("Single-Mean Table", DT::dataTableOutput("onetable"), hr())
, tabPanel("Single-Mean Plot", #textOutput("oneMapText"),
plotOutput("oneMap", width = "800px", height = "800px"))
, tabPanel("Scatterplot", scatterD3Output("biScatter", width = "100%", height = "600px"))
, tabPanel("Two-Mean Plot", plotOutput("biMap", width = "800px", height = "800px")#
,plotOutput("biMapLegend")#, width = "auto", height = "auto", inline = TRUE
, verbatimTextOutput("biMapText"))
)
, position="center"
, height= "auto"
)
)
)
shinyApp(ui = ui, server = server)
plotLegend <- function(travelMeans){
x <- seq(255)
y <- seq(255)
grd <- expand.grid(x=x,y=y)
#assign colors to grd levels
pal1 <- colorRampPalette(c("white", "red"), space = "rgb")
col1 <- val2col(x, col=pal1(255))
pal2 <- colorRampPalette(c("white", "blue"), space = "rgb")
col2 <- val2col(y, col=pal2(255))
col3 <- NA*seq(nrow(grd))
for(i in seq(nrow(grd))){
xpos <- grd$x[i]
ypos <- grd$y[i]
coltmp <- (col2rgb(col1[xpos])/2) + (col2rgb(col2[ypos])/2)
col3[i] <- rgb(coltmp[1], coltmp[2], coltmp[3], maxColorValue = 255)
# grd$col[grd$x==xpos & grd$y==ypos] <- col3[i]
}
#  head(grd)
layout(matrix(c(1,2,3), nrow=1, ncol=3), widths=c(2,1,1), heights=2, respect=T)
plot(grd,col=col3, pch=19, xlab= meandata$MeanName[meandata$MeanCode==travelMeans[2]]
, ylab= meandata$MeanName[meandata$MeanCode==travelMeans[1]] , xaxt='n', yaxt='n')
return(grd)
}
# This function plots the colored map of two travel means
biMap <- function(travelMeans)
{
fullList <- prepareTwoMeans(travelMeans)
#   grd <- plotLegend(travelMeans)
#   for (i in nrow(fullList)){
#     fullList$col <- grd$col[grd$x==fullList$xpos & grd$y==fullList$ypos]
#   }
# plot(shape, legend=FALSE, border = "Black", col= fullList$col)
plot(shape, legend=FALSE, border = "Black", col= fullList$mix)
}
#Definte server logic required to draw the map
server <- function(input, output, session) {
updateoneTable <- reactive({
onetable <- subset(newtable, newtable$MeanCode == tail(input$travelMeans, 1), select = -c(MeanCode)
, colnames = c('Territory', 'Mean Name', 'Number of People', 'Overall weight'))
onetable <- onetable[order(onetable$Percentage),]
rownames(onetable) <- seq(length=nrow(onetable))
return (onetable)
})
output$onetable <- DT::renderDataTable({
DT::datatable(
updateoneTable(), selection = "none"
, extensions = list("Scroller")
, options = list(
scrollY = 700
, pageLength = 30
, lengthMenu = list(c(30, -1), c("30", "All"))
)
)}
, server = TRUE
)
observe({
if (length(input$travelMeans) > maxGrp)
{
updateCheckboxGroupInput(session, 'travelMeans', selected = tail(input$travelMeans,maxGrp))
}
})
output$biMapText <- renderText({
paste("Red: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[1]]
, "Purple: A combination of both travel means"
, "Blue: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[2]], sep = "\n")
})
output$oneMap <- renderPlot(singleMap(input$categories, input$travelMeans, input$classIntMethod))
#  output$oneMapText <- renderText({ paste("Selected travel mean: ", meandata$MeanName[meandata$MeanCode == input$travelMeans[2]] )})
output$biMap  <- renderPlot(biMap(input$travelMeans))
output$biMapLegend  <- renderPlot(plotLegend(input$travelMeans))#, width = "auto", height = "auto"
biList <- reactive({
prepareTwoMeans(input$travelMeans)
})
output$biScatter <- renderScatterD3({
tooltips <- paste("<strong>Territory Authority: ", biList()$AreaName,"</strong><br /> Percentage of x: "
, biList()$Percentage.x, "<br />"
, "Percentage of y: ", biList()$Percentage.y)
plot <- scatterD3(x = biList()$Percentage.x, y = biList()$Percentage.y
, xlab = meandata$MeanName[meandata$MeanCode == unique(biList()$MeanCode.x)]
, ylab = meandata$MeanName[meandata$MeanCode == unique(biList()$MeanCode.y)]
, tooltip_text = tooltips
)
return (plot)
})
}
#Definte UI for the application
ui <- shinyUI(fluidPage(
titlePanel(title = "Interactive Map of New Zealand", windowTitle = "Interactive Map of New Zealand"),
sidebarPanel(
sliderInput("categories", "Number of Categories", min = 1, max = 10, value = 5
)
, br()
, selectInput(
"classIntMethod"#, "Division Method"
, label = "Select the intervals"
, choices = list("Equal" = "equal"
, "Fixed"= "fixed"
, "Pretty" = "pretty"
, "Quantiles" = "quantile"
, "Standard Deviation" = "sd"
)
, selected = "quantile"
, multiple = FALSE
)
, br()
# The following part is groupCheckBox format for the travelMeans
, checkboxGroupInput(
"travelMeans"
, label = "Select the mean below:"
, choices = meanChoices
, selected = NULL
)
, br()
),
#Show the map
mainPanel(
tabsetPanel(#type = "tabs",
tabPanel("Single-Mean Table", DT::dataTableOutput("onetable"), hr())
, tabPanel("Single-Mean Plot", #textOutput("oneMapText"),
plotOutput("oneMap", width = "800px", height = "800px"))
, tabPanel("Scatterplot", scatterD3Output("biScatter", width = "100%", height = "600px"))
, tabPanel("Two-Mean Plot", plotOutput("biMap", width = "800px", height = "800px")#
,plotOutput("biMapLegend")#, width = "auto", height = "auto", inline = TRUE
, verbatimTextOutput("biMapText"))
)
, position="center"
, height= "auto"
)
)
)
shinyApp(ui = ui, server = server)
